using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.NetworkInformation;
using static System.Net.Mime.MediaTypeNames;
using System.Threading;
using System.Xml.Linq;

namespace DB
{

   


    public class DataBase 
    {
        #region create database lite
        public bool CreateResultDatabase(string server, string login, string password, string databaseName)
        { return CreateResultDatabase(server, login, password, databaseName, ""); }

        public bool CreateResultDatabase(string server, string login, string password, string databaseName, string path)
        {
            string strDBConnection = "SERVER = " + server + " ; DATABASE = master" + //databaseName +
                              "; UID = " + login + "; PWD = " + password + ";";
            try
            {
                using (SqlConnection dbcon = new SqlConnection(strDBConnection))
                {
                    dbcon.Open();
                    string strSqlTx = "", strFilePath = "";

                    strSqlTx = "sp_helpFile";
                    SqlCommand cmdTbSql = new SqlCommand(strSqlTx, dbcon);
                    SqlDataReader readOdbcSql = cmdTbSql.ExecuteReader(CommandBehavior.CloseConnection);
                    if (readOdbcSql.Read())
                        strFilePath = readOdbcSql.GetValue(2).ToString();
                    readOdbcSql.Dispose();
                    cmdTbSql.Dispose();
                    dbcon.Close();

                    strFilePath = strFilePath.Substring(0, strFilePath.IndexOf("master"));
                    if (path != "") strFilePath = path + "\\";

                    dbcon.Open();
                    #region create database
                    strSqlTx = "CREATE DATABASE [" + databaseName + "] ON  PRIMARY " +
                        "( NAME = N'" + databaseName + "', FILENAME = N'" + strFilePath + databaseName + ".mdf' , " +
                        " SIZE = 5MB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB ) " +
                        " LOG ON " +
                        " ( NAME = N'" + databaseName + "_log', FILENAME = N'" + strFilePath + databaseName + "_log.ldf' ," +
                        " SIZE = 5MB , MAXSIZE = 2048GB , FILEGROWTH = 10%)";

                    SqlCommand cmdOdbcTbSql = new SqlCommand(strSqlTx, dbcon);
                    cmdOdbcTbSql.ExecuteNonQuery();
                    dbcon.ChangeDatabase(databaseName);

                    strSqlTx = "CREATE TABLE [dbo].[EngineList]( " +
                        "[Barcode] [varchar](50)  NOT NULL, " +
                        "[EngineType] [varchar](20), " +
                        "[InDateTime] [datetime]," +
                       "[OutDateTime] [datetime]," +
                       "[Location] [varchar](50)," +
                       "[InHandler] [varchar](50)," +
                       "[OutHandler] [varchar](50)" +
                        " ) ON [PRIMARY]  ";
                    SqlCommand cmdSqlTable1 = new SqlCommand(strSqlTx, dbcon);
                    cmdSqlTable1.ExecuteNonQuery();
                    cmdSqlTable1.Dispose();


                    strSqlTx = "CREATE TABLE [dbo].[MES]( " +
                       "[Date] [date]  NOT NULL, " +
                       "[Sequence] [int], " +
                       "[Model] [varchar](20)," +
                      "[Quantity] [int]," +
                      "[Currently] [int]" +
                       " ) ON [PRIMARY]  ";
                    SqlCommand cmdSqlTable2 = new SqlCommand(strSqlTx, dbcon);
                    cmdSqlTable2.ExecuteNonQuery();

                    cmdSqlTable2.Dispose();



                    #endregion
                    dbcon.Close();
                }
            }
            catch (Exception e)
            { 
                LogMsg.CMsg.Show("DBInterface", "Create EngineList DB error", e.Message, false, true);
                return false;
            }
            finally
            {
            }

            return true;
        }
        #endregion

        #region load database list
        public List<string> LoadDataBaseList(string server, string login, string password)
        {
            string strDBConnection = "SERVER = " + server + " ; DATABASE = master" + //dbInfo.DatabaseName +
                              "; UID = " + login + "; PWD = " + password + ";";
            List<string> dbList = new List<string>();

            try
            {
                using (SqlConnection dbcon = new SqlConnection(strDBConnection))
                {
                    dbcon.Open();
                    string strSqlTx = "";

                    strSqlTx = "select * from sysdatabases";
                    SqlCommand cmdTbSql = new SqlCommand(strSqlTx, dbcon);
                    SqlDataReader readOdbcSql = cmdTbSql.ExecuteReader(CommandBehavior.CloseConnection);


                    while (readOdbcSql.Read())
                    {
                        string dc = readOdbcSql.GetValue(0).ToString();
                        if ((dc != "master") && (dc != "model") && (dc != "tempdb") && (dc != "msdb"))
                            dbList.Add(dc);
                    }
                    readOdbcSql.Dispose();
                    cmdTbSql.Dispose();
                    dbcon.Close();
                }
            }
            catch (Exception exp)
            {
                MessageBox.Show("Failed to load database list \n\r" + exp.Message, "Error",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                return dbList;
            }
            finally
            {
            }
            return dbList;
        }
        #endregion

        #region external call function from UTS
        public bool ConfigDB()
        {
            frmSet cfg = new frmSet();
            cfg.ShowDialog();
            return true;
        }

        public DBConnectInfo LoadDBInformation()
        {
            DBConnectInfo dbInfo;
            frmSet cfg = new frmSet();

            cfg = cfg.LoadConfig();

            dbInfo.DatabaseName = cfg.R_Database;
            dbInfo.ServerIP = cfg.Server;
            dbInfo.UserID = cfg.Login;
            dbInfo.UserPassword = cfg.Password;
            return dbInfo;
        }
        #endregion
    }

    public struct DBConnectInfo
    {
        public string ServerIP;
        public string DatabaseName;
        public string UserID;
        public string UserPassword;
    }

    public class DBInterface
    {
        public DBInterface()
        {
            cfg = cfg.LoadConfig();
        }

        public NetworkPing TestPing = new NetworkPing();
        public DBConnectInfo dbInfo = new DBConnectInfo();
        private frmSet cfg = new frmSet();



        //입고
        public bool Incomming(string barcode, string EngineType, string Location, string InHandler)
        {
            LogMsg.CMsg.Show("DBInterface", "Incomming ", barcode, false, true);
            
            

            
            string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
                "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";


     

            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();
                   

                    #region testinfo
                    string strSqlTxEn = "Select Count(*) From EngineList Where Barcode = '" + barcode + "'";
                    SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
                    int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
                    cmdSelSqlEn.Dispose();

                   
                    string strSqlTx1 = "INSERT INTO EngineList (Barcode, " +
                                       " EngineType, Location, InHandler, InDateTime ) VALUES(" +
                            "'" + barcode + "'," +
                              "'" + EngineType + "'," +
                              "'" + Location + "'," +
                              "'" + InHandler + "'," +
                            "GETDATE())";
                           

                    SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
                    cmdListSql11.ExecuteNonQuery();
                    cmdListSql11.Dispose();

                  
                    #endregion

           
                    LogMsg.CMsg.Show("DBInterface", "Finish Incomming ", "", false, true);
                    dbcn.Close();
                    return true;
                }
                catch (Exception e)
                {
                    LogMsg.CMsg.Show("DBInterface", "Incomming error", e.Message, true, true);
                }

                if (dbcn.State == ConnectionState.Open) dbcn.Close();
            }
    
            return false;

        }


        //출고
        public bool Outgoing(string barcode, string outHandler)
        {

            LogMsg.CMsg.Show("DBInterface", "Outgoing ", "Barcode:'" + barcode + "'", false, true);
            string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
               "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";




            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();


                    #region testinfo
                    string strSqlTxEn = "Select Count(*) From EngineList Where Barcode = '" + barcode + "'";
                    SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
                    int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
                    cmdSelSqlEn.Dispose();

                    if (nCount > 0)
                    {
                        string strSqlTx1 = "UPDATE EngineList SET OutDateTime = GETDATE(), OutHandler = '"+ outHandler + "', Location = 'OUT'  WHERE Barcode = '" + barcode + "'";
                        SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
                        cmdListSql11.ExecuteNonQuery();
                        cmdListSql11.Dispose();
                        LogMsg.CMsg.Show("DBInterface", "Save Outgoing ", "", false, true);
                        dbcn.Close();
                        return true;

                    }
                    #endregion



                }
                catch (Exception e)
                {
                    LogMsg.CMsg.Show("DBInterface", "Outgoing error", e.Message, true, true);
                }

                if (dbcn.State == ConnectionState.Open) dbcn.Close();
            }

            return false;

        }

        public bool Update(string update, string barcode)
        {
            LogMsg.CMsg.Show("DBInterface", "Update ", "Barcode:'" + barcode + "'", false, true);
            string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
               "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";
            
            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();


                    #region testinfo
                    string strSqlTxEn = "Select Count(*) From EngineList Where Barcode = '" + barcode + "'";
                    SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
                    int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
                    cmdSelSqlEn.Dispose();

                    if (nCount > 0)
                    {
                     

                        

                        

                        string strSqlTx1 = "UPDATE EngineList SET " + update + " WHERE Barcode= '" + barcode + "'";

                        SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
                        cmdListSql11.ExecuteNonQuery();
                        cmdListSql11.Dispose();
                        LogMsg.CMsg.Show("DBInterface", "Update ", "", false, true);
                        dbcn.Close();
                        return true;
                        
                       
                    }
                    #endregion



                }
                catch (Exception e)
                {
                    LogMsg.CMsg.Show("DBInterface", "Update error", e.ToString(), true, true);
                }

                if (dbcn.State == ConnectionState.Open) dbcn.Close();
            }
            return false;
        }


        //Return: Barcode, EngineType, InDateTime, OutDateTime, Location, InHandler, OutHandler
        /// <summary>
        /// Get Engine List (Select [col] from EngineList where [condition]) *Enter columns separated by “;”*
        /// </summary>
        /// <param name="barcode"></param>
        /// <param name="EngineType"></param>
        /// <param name="date"></param>
        /// <param name="handler"></param>
        /// <returns>Barcode, EngineType, InDateTime, OutDateTime, Location, InHandler, OutHandler</returns>
        public List<string> GetList(string col, string condition)
        {
            LogMsg.CMsg.Show("DBInterface", "GetList ", "", false, true);

            List<string> engineList = new List<string>();

            string SQLConnectionInfo = $"SERVER={cfg.Server}; DATABASE={cfg.R_Database}; UID={cfg.Login}; PWD={cfg.Password};";

            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();
                    string columns = col.Replace(";", ",");
                    string strSqlTxEn = $"SELECT {columns} FROM EngineList WHERE {condition}";

                    using (SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn))
                    using (SqlDataReader readOdbcSql = cmdSelSqlEn.ExecuteReader())
                    {
                        int numCol = col.Split(';').Length;

                        while (readOdbcSql.Read())
                        {
                            List<string> rowValues = new List<string>();

                            for (int i = 0; i < numCol; i++)
                            {
                                rowValues.Add(readOdbcSql.GetValue(i).ToString());
                            }

                            engineList.Add(string.Join(",", rowValues));
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogMsg.CMsg.Show("DBInterface", "Get EngintList - Error: " + ex.Message, "", true, true);
                    return new List<string>();
                }
            }

            return engineList;
            

        }

        public bool DeleteDB(string barcode)
        {

            LogMsg.CMsg.Show("DBInterface", "Delete Barcode ", "'" + barcode + "'", false, true);




            string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
                "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";




            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();


                    #region testinfo
                    string strSqlTxEn = "Select Count(*) From EngineList Where Barcode = '" + barcode ;
                    SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
                    int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
                    cmdSelSqlEn.Dispose();

                    if (nCount > 0)
                    {
                        string strSqlTx1 = "DELETE FROM EngineList WHERE Barcode = '" + barcode;
                        SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
                        cmdListSql11.ExecuteNonQuery();
                        cmdListSql11.Dispose();
                    }




                    #endregion


                    LogMsg.CMsg.Show("DBInterface", "Finish Delete Barcode ", "", false, true);
                    dbcn.Close();
                    return true;
                }
                catch (Exception e)
                {
                    LogMsg.CMsg.Show("DBInterface", "Delete barcode error", e.Message, true, true);
                }
                 
                if (dbcn.State == ConnectionState.Open) dbcn.Close();
            }

            return false;

        }

        #region MES DB
        /// <summary>
        /// Get MES Data List (Select [col] from MES where [condition]) *Enter columns separated by “;”*
        /// </summary>
        public List<string> GetMESList(string col ,string condition)
        {
            LogMsg.CMsg.Show("DBInterface", "GetMESList ", "", false, true);

            List<string> barcodeList = new List<string>();

            string SQLConnectionInfo = $"SERVER={cfg.Server}; DATABASE={cfg.R_Database}; UID={cfg.Login}; PWD={cfg.Password};";

            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();
                    string columns = col.Replace(";", ",");
                    string strSqlTxEn = $"SELECT {columns} FROM MES WHERE {condition}";

                    using (SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn))
                    using (SqlDataReader readOdbcSql = cmdSelSqlEn.ExecuteReader())
                    {
                        int numCol = col.Split(';').Length;

                        while (readOdbcSql.Read())
                        {
                            List<string> rowValues = new List<string>();

                            for (int i = 0; i < numCol; i++)
                            {
                                rowValues.Add(readOdbcSql.GetValue(i).ToString());
                            }

                            barcodeList.Add(string.Join(",", rowValues));
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogMsg.CMsg.Show("DBInterface", "GetMESList - Error: " + ex.Message, "", true, true);
                    return new List<string>();
                }
            }

            return barcodeList;

        }

        //Date, Sequence, Model, Quantity, Currently
        public bool InsertMES(string Date, int Sequence, string Model, int Quantity)
        {
            LogMsg.CMsg.Show("DBInterface", "Insert MES ", $"Date: {Date}, Sequence: {Sequence}, Model: {Model}, Quatity: {Quantity}", false, true);




            string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
                "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";




            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();


                    #region testinfo
                    //string strSqlTxEn = "Select Count(*) From EngineList Where Barcode = '" + barcode + "'";
                    //SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
                    //int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
                    //cmdSelSqlEn.Dispose();


                    string strSqlTx1 = "INSERT INTO MES (Date, " +
                                       " Sequence, Model, Quantity ) VALUES(" +
                            "'" + Date + "'," +
                              "'" + Sequence + "'," +
                              "'" + Model + "'," +
                              "'" + Quantity + "')";


                    SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
                    cmdListSql11.ExecuteNonQuery();
                    cmdListSql11.Dispose();


                    #endregion


                    LogMsg.CMsg.Show("DBInterface", "MES Inserted ", "", false, true);
                    dbcn.Close();
                    return true;
                }
                catch (Exception e)
                {
                    LogMsg.CMsg.Show("DBInterface", "MES Insert error", e.Message, true, true);
                }

                if (dbcn.State == ConnectionState.Open) dbcn.Close();
            }

            return false;

        }


        public bool MesUpdate(string update, string condition)
        {
            LogMsg.CMsg.Show("DBInterface", "MES Update ", "condition:'" + condition + "'", false, true);


            string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
               "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";




            using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
            {
                try
                {
                    dbcn.Open();


                    #region testinfo
                    string strSqlTxEn = "Select Count(*) From MES Where "+ condition;
                    SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
                    int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
                    cmdSelSqlEn.Dispose();

                    if (nCount > 0)
                    {
                        
                        string strSqlTx1 = "UPDATE Top(1) Mes SET "+ update + " WHERE " + condition;

                        SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
                        cmdListSql11.ExecuteNonQuery();
                        cmdListSql11.Dispose();
                        LogMsg.CMsg.Show("DBInterface", "MES Update ", strSqlTx1, false, true);
                        dbcn.Close();
                        return true;
                       
                    }
                    #endregion



                }
                catch (Exception e)
                {
                    LogMsg.CMsg.Show("DBInterface", "Update error", e.Message, true, true);
                }

                if (dbcn.State == ConnectionState.Open) dbcn.Close();
            }
            return false;
        }


        #region not use
        //public bool DeleteMes(string Date, string Sequence, string Model)
        //{

        //    LogMsg.CMsg.Show("DBInterface", "Delete MES ", $"Date: {Date}, Sequence: {Sequence}, Model: {Model}", false, true);




        //    string SQLConnectionInfo = "SERVER = " + cfg.Server + " ; DATABASE = " + cfg.R_Database +
        //        "; UID = " + cfg.Login + "; PWD = " + cfg.Password + ";";




        //    using (SqlConnection dbcn = new SqlConnection(SQLConnectionInfo))
        //    {
        //        try
        //        {
        //            dbcn.Open();


        //            #region testinfo
        //            string strSqlTxEn = $"Select Count(*) From MES Where Date = '{Date}' and Sequence = {Sequence} and Model = '{Model}'";
        //            SqlCommand cmdSelSqlEn = new SqlCommand(strSqlTxEn, dbcn);
        //            int nCount = Convert.ToInt32(cmdSelSqlEn.ExecuteScalar());
        //            cmdSelSqlEn.Dispose();

        //            if (nCount > 0)
        //            {
        //                string strSqlTx1 = "DELETE FROM EngineList WHERE Barcode = '" + barcode;
        //                SqlCommand cmdListSql11 = new SqlCommand(strSqlTx1, dbcn);
        //                cmdListSql11.ExecuteNonQuery();
        //                cmdListSql11.Dispose();
        //            }




        //            #endregion


        //            LogMsg.CMsg.Show("DBInterface", "Finish Delete Barcode ", "", false, true);
        //            dbcn.Close();
        //            return true;
        //        }
        //        catch (Exception e)
        //        {
        //            LogMsg.CMsg.Show("DBInterface", "Delete barcode error", e.Message, true, true);
        //        }

        //        if (dbcn.State == ConnectionState.Open) dbcn.Close();
        //    }

        //    return false;

        //}
        #endregion


        #endregion



    }


    class INI
    {

        #region //////////////// iNI 파일
        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern int WritePrivateProfileString(string asAppName, string asKeyName, string asValue, string asFileName);
        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern int GetPrivateProfileString(string asAppName, string asKeyName, string asDefault, StringBuilder asValue, int aiSize, string asFileName);
        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern bool QueryPerformanceCounter(out long lpPerformanceCount);
        [DllImport("Kernel32.dll", CharSet = CharSet.Auto)]
        public static extern bool QueryPerformanceFrequency(out long lpFrequency);
        //////////////// iNI 파일

        public static string ReadINI(string asFileName, string asAppName, string asKeyName)
        {
            StringBuilder retstr;
            retstr = new StringBuilder();
            retstr.Capacity = 32767;
            GetPrivateProfileString(asAppName, asKeyName, "", retstr, 32767, asFileName);
            return retstr.ToString();
        }

        public static void WriteINI(string asFileName, string asAppName, string asKeyName, string asValue)
        {
            INI.WritePrivateProfileString(asAppName, asKeyName, asValue, asFileName);

        }
        #endregion
    }

    public class NetworkPing
    {
        #region network test
        public bool NetworkToTest(string pIP)
        {
            if (pIP == null || pIP == "") return false;
            Ping pingSender = new Ping();
            PingReply reply = pingSender.Send(pIP);

            if (reply.Status == IPStatus.Success)
            {
                return true;
            }

            return false;
        }
        #endregion
    }
}
